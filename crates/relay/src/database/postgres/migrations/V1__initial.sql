/*

Path: crates/database/src/postgres/migrations/V1__initial.sql

This file is not generated by any ORM or other tool. It is a hand-written SQL.
These tables define the schema for the titan relay database.

Notes on types:
- bytea is a byte array, used for hashes and public keys
-- note postgresql does not allow for bytea to be limited in size. This is sql stuff.
- numeric(78) is a 78 digit decimal, used for wei amounts (10^77 < 2^256 < 10^78)
- uuid is a 128 bit uuid, used for various ids

Notes on tables:
- slot.block_number can be null for missed slots

*/


CREATE TABLE "region" (
  "id" smallint PRIMARY KEY,
  "name" varchar
);

CREATE TABLE "block_submission" (
  "block_hash" bytea PRIMARY KEY,
  "timestamp" bigint,
  "slot_number" integer,
  "block_number" integer,
  "parent_hash" bytea,
  "builder_pubkey" bytea,
  "proposer_pubkey" bytea,
  "proposer_fee_recipient" bytea,
  "gas_limit" integer,
  "gas_used" integer,
  "value" numeric(78),
  "num_txs" integer,
  "created_at" timestamptz DEFAULT (now())
);

CREATE TABLE "submission_trace" (
  -- "id" uuid PRIMARY KEY,
  "block_hash" bytea,
  "region_id" smallint,
  "receive" bigint,
  "decode" bigint,
  "pre_checks" bigint,
  "signature" bigint,
  "floor_bid_checks" bigint,
  "simulation" bigint,
  "auctioneer_update" bigint,
  "request_finish" bigint
);

CREATE TABLE "delivered_payload" (
  "block_hash" bytea PRIMARY KEY,
  "payload_parent_hash" bytea,
  "fee_recipient" bytea,
  "state_root" bytea,
  "receipts_root" bytea,
  "logs_bloom" bytea,
  "prev_randao" bytea,
  "timestamp" bigint,
  "block_number" integer,
  "gas_limit" integer,
  "gas_used" integer,
  "extra_data" bytea,
  "base_fee_per_gas" numeric(78),
  "created_at" timestamptz DEFAULT (now())
);

CREATE TABLE "payload_trace" (
  -- "id" uuid PRIMARY KEY,
  "block_hash" bytea,
  "region_id" smallint,
  "receive" bigint,
  "proposer_index_validated" bigint,
  "signature_validated" bigint,
  "payload_fetched" bigint,
  "validation_complete" bigint,
  "beacon_client_broadcast" bigint,
  "broadcaster_block_broadcast" bigint,
  "on_deliver_payload" bigint
);

CREATE TABLE "late_payload" (
  "id" uuid PRIMARY KEY,
  "block_hash" bytea,
  "slot_number" integer,
  "region_id" smallint,
  "message_received" bigint,
  "payload_fetched" bigint,
  "created_at" timestamptz DEFAULT (now())
);

CREATE TABLE "transaction" (
  --"id" uuid PRIMARY KEY,
  "block_hash" bytea NOT NULL,
  "bytes" bytea NOT NULL,
  UNIQUE ("block_hash", "bytes")
);


CREATE TABLE "withdrawal" (
  "index" integer NOT NULL,
  "block_hash" bytea NOT NULL,
  "validator_index" integer,
  "address" bytea,
  "amount" bigint,
  UNIQUE ("index", "block_hash")
);

CREATE TABLE "slot" (
  "number" integer PRIMARY KEY,
  "epoch" integer,
  "block_number" integer,
  "missed" boolean,
  "proposer" bytea,
  "block_root" bytea,
  "parent_root" bytea,
  "state_root" bytea,
  "block_hash" bytea,
  "created_at" timestamptz DEFAULT (now())
);

CREATE TABLE validator_registrations (
  "public_key" bytea PRIMARY KEY,
  "fee_recipient" bytea,
  "gas_limit" integer,
  "timestamp" bigint,
  "signature" bytea,
  "inserted_at" timestamptz DEFAULT (now())
);

CREATE TABLE validator_preferences (
  "public_key" bytea PRIMARY KEY,
  "censoring" boolean
);

CREATE TABLE known_validators (
  "public_key" bytea PRIMARY KEY
);


CREATE TABLE proposer_duties (
  "public_key" bytea PRIMARY KEY,
  "slot_number" integer,
  "validator_index" integer
);


CREATE TABLE builder_info (
  "public_key" bytea PRIMARY KEY,
  "collateral" numeric(78),
  "is_optimistic" boolean
);


CREATE TABLE demotions (
  "public_key" bytea,
  "demotion_time" bigint
);

CREATE TABLE simulation_error (
  "block_hash" bytea PRIMARY KEY,
  "error" varchar
);


-- add foreign keys

-- submissions

ALTER TABLE "submission_trace" ADD FOREIGN KEY ("region_id") REFERENCES "region" ("id");

-- payloads

ALTER TABLE "payload_trace" ADD FOREIGN KEY ("region_id") REFERENCES "region" ("id");

-- create hypertables
CREATE EXTENSION IF NOT EXISTS timescaledb;
SELECT create_hypertable('submission_trace', 'receive', chunk_time_interval => 86400000, if_not_exists => TRUE);
SELECT create_hypertable('payload_trace', 'receive', chunk_time_interval => 86400000, if_not_exists => TRUE);
