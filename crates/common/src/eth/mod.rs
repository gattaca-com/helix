pub mod blob_sidecars;

use alloy_primitives::B256;
use helix_types::{
    BlsPublicKey, BuilderBid, BuilderBidDeneb, BuilderBidElectra, ExecutionPayloadHeaderDeneb,
    ExecutionPayloadHeaderElectra, SignedBidSubmission, SignedBuilderBid, Slot,
};

use crate::{
    bid_submission::v2::header_submission::SignedHeaderSubmission, signing::RelaySigningContext,
};

/// Index of the `blob_kzg_commitments` leaf in the `BeaconBlockBody` tree post-deneb.
pub const BLOB_KZG_COMMITMENTS_INDEX: usize = 11;

#[derive(Debug, Clone, PartialEq, Eq, Hash, serde::Serialize, serde::Deserialize)]
pub struct BidRequest {
    pub slot: Slot,
    pub parent_hash: B256,
    pub public_key: BlsPublicKey,
}

impl std::fmt::Display for BidRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let slot = self.slot;
        let parent_hash = &self.parent_hash;
        let public_key = &self.public_key;
        write!(f, "slot {slot}, parent hash {parent_hash} and proposer {public_key}")
    }
}

/// Creates a new [`SignedBuilderBid`] (get_header_reponse) from a [`SignedBidSubmission`]. The
/// signature is replaced with the a new using the provided signing key.
pub fn bid_submission_to_builder_bid(
    submission: &SignedBidSubmission,
    signing_ctx: &RelaySigningContext,
) -> SignedBuilderBid {
    match submission {
        SignedBidSubmission::Deneb(bid) => {
            let header: ExecutionPayloadHeaderDeneb = (&bid.execution_payload).into();
            let blobs_bundle = &bid.blobs_bundle;
            let message: BuilderBid = BuilderBidDeneb {
                header,
                blob_kzg_commitments: blobs_bundle.commitments.clone(),
                value: bid.message.value,
                pubkey: signing_ctx.pubkey().into(), // relay pubkey
            }
            .into();

            let sig = signing_ctx.sign_builder_message(&message);
            SignedBuilderBid { message, signature: sig }
        }
        SignedBidSubmission::Electra(bid) => {
            let header: ExecutionPayloadHeaderElectra = (&bid.execution_payload).into();
            let blobs_bundle = &bid.blobs_bundle;
            let message: BuilderBid = BuilderBidElectra {
                header,
                blob_kzg_commitments: blobs_bundle.commitments.clone(),
                value: bid.message.value,
                execution_requests: bid.execution_requests.clone(),
                pubkey: signing_ctx.pubkey().into(), // relay pubkey
            }
            .into();

            let sig = signing_ctx.sign_builder_message(&message);
            SignedBuilderBid { message, signature: sig }
        }
    }
}

/// Creates a new [`SignedBuilderBid`] (get_header_reponse) from a [`SignedHeaderSubmission`] (v2 or
/// v3 submission). The signature is replaced with the a new using the provided signing key.
pub fn header_submission_to_builder_bid(
    submission: &SignedHeaderSubmission,
    signing_ctx: &RelaySigningContext,
) -> SignedBuilderBid {
    match submission {
        SignedHeaderSubmission::Deneb(bid) => {
            let header = bid.message.execution_payload_header.clone();
            let message: BuilderBid = BuilderBidDeneb {
                header,
                blob_kzg_commitments: bid.message.commitments.clone(),
                value: bid.message.bid_trace.value,
                pubkey: signing_ctx.pubkey().into(), // relay pubkey
            }
            .into();

            let sig = signing_ctx.sign_builder_message(&message);
            SignedBuilderBid { message, signature: sig }
        }
        SignedHeaderSubmission::Electra(bid) => {
            let header = bid.message.execution_payload_header.clone();
            let message: BuilderBid = BuilderBidElectra {
                header,
                blob_kzg_commitments: bid.message.commitments.clone(),
                value: bid.message.bid_trace.value,
                execution_requests: bid.message.execution_requests.clone(),
                pubkey: signing_ctx.pubkey().into(), // relay pubkey
            }
            .into();

            let sig = signing_ctx.sign_builder_message(&message);
            SignedBuilderBid { message, signature: sig }
        }
    }
}

// #[cfg(test)]
// mod tests {

//     use super::*;

//     #[test]
//     fn test_deserialize_signed_blinded_beacon_block() {
//         let json_bytes = vec![
//             123, 34, 109, 101, 115, 115, 97, 103, 101, 34, 58, 123, 34, 115, 108, 111, 116, 34,
// 58,             34, 50, 49, 34, 44, 34, 112, 114, 111, 112, 111, 115, 101, 114, 95, 105, 110,
// 100, 101,             120, 34, 58, 34, 50, 34, 44, 34, 112, 97, 114, 101, 110, 116, 95, 114, 111,
// 111, 116,             34, 58, 34, 48, 120, 48, 50, 48, 51, 48, 48, 48, 48, 48, 48, 48, 48, 48,
// 48, 48, 48,             48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
// 48, 48, 48, 48,             48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
// 48, 48, 48, 48, 48,             48, 48, 48, 48, 34, 44, 34, 115, 116, 97, 116, 101, 95, 114, 111,
// 111, 116, 34, 58, 34,             48, 120, 49, 55, 48, 52, 48, 52, 48, 48, 48, 48, 48, 48, 48,
// 48, 48, 48, 48, 48, 48,             48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
// 48, 48, 48, 48, 48, 48, 48,             48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
// 48, 48, 48, 48, 48, 48, 48, 48,             48, 34, 44, 34, 98, 111, 100, 121, 34, 58, 123, 34,
// 114, 97, 110, 100, 97, 111, 95,             114, 101, 118, 101, 97, 108, 34, 58, 34, 48, 120, 48,
// 52, 50, 50, 48, 53, 48, 54, 48,             53, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
// 48, 48, 48, 48, 48, 48, 48, 48, 48,             48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
// 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,             48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
// 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,             48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
// 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,             48, 48, 48, 48, 48, 48, 48, 48, 48,
// 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,             48, 48, 48, 48, 48, 48, 48, 48,
// 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,             48, 48, 48, 48, 48, 48, 48,
// 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,             48, 48, 48, 48, 48, 48,
// 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,             48, 48, 48, 48, 48,
// 48, 48, 34, 44, 34, 101, 116, 104, 49, 95, 100, 97, 116, 97, 34,             58, 123, 34, 100,
// 101, 112, 111, 115, 105, 116, 95, 114, 111, 111, 116, 34, 58, 34, 48,             120, 51, 54,
// 49, 55, 48, 98, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,             48, 48, 48,
// 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,             48, 48,
// 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,             34,
// 44, 34, 100, 101, 112, 111, 115, 105, 116, 95, 99, 111, 117, 110, 116, 34, 58, 34,
// 50, 51, 34, 44, 34, 98, 108, 111, 99, 107, 95, 104, 97, 115, 104, 34, 58, 34, 48, 120,
//             48, 53, 48, 54, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
// 48,             48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
// 48, 48,             48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
// 48, 34,             125, 44, 34, 103, 114, 97, 102, 102, 105, 116, 105, 34, 58, 34, 48, 120, 48,
// 48, 48,             48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
// 48, 48, 48,             48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
// 48, 48, 48, 48,             48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
// 34, 44, 34, 112,             114, 111, 112, 111, 115, 101, 114, 95, 115, 108, 97, 115, 104, 105,
// 110, 103, 115, 34,             58, 91, 93, 44, 34, 97, 116, 116, 101, 115, 116, 101, 114, 95,
// 115, 108, 97, 115, 104,             105, 110, 103, 115, 34, 58, 91, 93, 44, 34, 97, 116, 116,
// 101, 115, 116, 97, 116, 105,             111, 110, 115, 34, 58, 91, 93, 44, 34, 100, 101, 112,
// 111, 115, 105, 116, 115, 34, 58,             91, 93, 44, 34, 118, 111, 108, 117, 110, 116, 97,
// 114, 121, 95, 101, 120, 105, 116,             115, 34, 58, 91, 93, 44, 34, 115, 121, 110, 99, 95,
// 97, 103, 103, 114, 101, 103, 97,             116, 101, 34, 58, 123, 34, 115, 121, 110, 99, 95,
// 99, 111, 109, 109, 105, 116, 116,             101, 101, 95, 98, 105, 116, 115, 34, 58, 34, 48,
// 120, 48, 48, 48, 48, 48, 48, 48, 48,             48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
// 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,             48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
// 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,             48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
// 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,             48, 48, 48, 48, 48, 48, 48, 48, 48,
// 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,             48, 48, 48, 48, 48, 48, 48, 48,
// 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,             48, 48, 48, 48, 48, 48, 48,
// 48, 48, 48, 34, 44, 34, 115, 121, 110, 99, 95, 99, 111,             109, 109, 105, 116, 116, 101,
// 101, 95, 115, 105, 103, 110, 97, 116, 117, 114, 101, 34,             58, 34, 48, 120, 48, 49, 54,
// 51, 54, 51, 54, 51, 48, 48, 48, 48, 48, 48, 48, 48, 48,             48, 48, 48, 48, 48, 48, 48,
// 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,             48, 48, 48, 48, 48, 48,
// 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,             48, 48, 48, 48, 48,
// 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,             48, 48, 48, 48,
// 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,             48, 48, 48,
// 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,             48, 48,
// 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,             48,
// 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
// 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 34,
//             125, 44, 34, 101, 120, 101, 99, 117, 116, 105, 111, 110, 95, 112, 97, 121, 108, 111,
//             97, 100, 95, 104, 101, 97, 100, 101, 114, 34, 58, 123, 34, 112, 97, 114, 101, 110,
// 116,             95, 104, 97, 115, 104, 34, 58, 34, 48, 120, 48, 49, 48, 49, 48, 50, 48, 51, 50,
// 100,             48, 57, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
// 48, 48,             48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
// 48, 48, 48,             48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 34, 44, 34, 102, 101, 101, 95,
// 114, 101, 99,             105, 112, 105, 101, 110, 116, 34, 58, 34, 48, 120, 48, 50, 48, 50, 48,
// 50, 48, 50, 49,             55, 48, 52, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
// 48, 48, 48, 48, 48,             48, 48, 48, 48, 48, 48, 48, 48, 48, 34, 44, 34, 115, 116, 97,
// 116, 101, 95, 114, 111,             111, 116, 34, 58, 34, 48, 120, 48, 51, 51, 54, 48, 55, 48,
// 48, 48, 48, 48, 48, 48, 48,             48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
// 48, 48, 48, 48, 48, 48, 48, 48,             48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
// 48, 48, 48, 48, 48, 48, 48, 48, 48,             48, 48, 48, 48, 48, 48, 34, 44, 34, 114, 101, 99,
// 101, 105, 112, 116, 115, 95, 114,             111, 111, 116, 34, 58, 34, 48, 120, 48, 56, 48, 55,
// 48, 53, 49, 55, 48, 50, 48, 48, 48,             48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
// 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,             48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
// 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,             48, 48, 48, 48, 48, 48, 48, 34, 44, 34,
// 108, 111, 103, 115, 95, 98, 108, 111, 111, 109,             34, 58, 34, 48, 120, 100, 101, 50,
// 49, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,             48, 48, 48, 48, 48, 48, 48, 48,
// 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,             48, 48, 48, 48, 48, 48, 48,
// 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,             48, 48, 48, 48, 48, 48,
// 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,             48, 48, 48, 48, 48,
// 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,             48, 48, 48, 48,
// 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,             48, 48, 48,
// 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,             48, 48,
// 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,             48,
// 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
// 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
//             48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
// 48,             48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
// 48, 48,             48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
// 48, 48, 48,             48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
// 48, 48, 48, 48,             48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
// 48, 48, 48, 48, 48,             48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
// 48, 48, 48, 48, 48, 48,             48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
// 48, 48, 48, 48, 48, 48, 48,             48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
// 48, 48, 48, 48, 48, 48, 48, 48,             48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
// 48, 48, 48, 48, 48, 48, 48, 48, 48,             48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
// 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,             48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
// 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,             48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
// 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,             48, 48, 48, 48, 48, 48, 48, 48, 48,
// 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,             48, 48, 48, 48, 48, 48, 48, 48,
// 48, 48, 48, 48, 34, 44, 34, 112, 114, 101, 118, 95,             114, 97, 110, 100, 97, 111, 34,
// 58, 34, 48, 120, 48, 98, 52, 100, 52, 50, 50, 98, 48,             48, 48, 48, 48, 48, 48, 48, 48,
// 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,             48, 48, 48, 48, 48, 48, 48,
// 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,             48, 48, 48, 48, 48, 48,
// 48, 48, 48, 48, 48, 34, 44, 34, 98, 108, 111, 99, 107, 95, 110,             117, 109, 98, 101,
// 114, 34, 58, 34, 49, 34, 44, 34, 103, 97, 115, 95, 108, 105, 109,             105, 116, 34, 58,
// 34, 50, 34, 44, 34, 103, 97, 115, 95, 117, 115, 101, 100, 34, 58, 34,             52, 34, 44, 34,
// 116, 105, 109, 101, 115, 116, 97, 109, 112, 34, 58, 34, 53, 34, 44, 34,             101, 120,
// 116, 114, 97, 95, 100, 97, 116, 97, 34, 58, 34, 48, 120, 53, 52, 54, 57, 55,             52, 54,
// 49, 54, 101, 34, 44, 34, 98, 97, 115, 101, 95, 102, 101, 101, 95, 112, 101,             114, 95,
// 103, 97, 115, 34, 58, 34, 50, 53, 51, 34, 44, 34, 98, 108, 111, 99, 107, 95,             104, 97,
// 115, 104, 34, 58, 34, 48, 120, 49, 100, 52, 100, 51, 55, 52, 50, 52, 55, 50,             48, 48,
// 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,             48,
// 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
// 48, 48, 48, 48, 48, 48, 48, 48, 48, 34, 44, 34, 116, 114, 97, 110, 115, 97, 99, 116,
// 105, 111, 110, 115, 95, 114, 111, 111, 116, 34, 58, 34, 48, 120, 48, 49, 48, 49, 48,
// 49, 48, 50, 54, 51, 53, 56, 52, 100, 53, 56, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
// 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
//             48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 34, 44, 34, 119, 105,
//             116, 104, 100, 114, 97, 119, 97, 108, 115, 95, 114, 111, 111, 116, 34, 58, 34, 48,
// 120,             53, 52, 51, 54, 49, 55, 53, 54, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
// 48, 48,             48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
// 48, 48, 48,             48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
// 48, 48, 34,             125, 44, 34, 98, 108, 115, 95, 116, 111, 95, 101, 120, 101, 99, 117, 116,
// 105, 111,             110, 95, 99, 104, 97, 110, 103, 101, 115, 34, 58, 91, 93, 125, 125, 44, 34,
// 115, 105,             103, 110, 97, 116, 117, 114, 101, 34, 58, 34, 48, 120, 48, 50, 48, 51, 48,
// 52, 48, 53,             48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
// 48, 48, 48, 48,             48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
// 48, 48, 48, 48, 48,             48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
// 48, 48, 48, 48, 48, 48,             48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
// 48, 48, 48, 48, 48, 48, 48,             48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
// 48, 48, 48, 48, 48, 48, 48, 48,             48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
// 48, 48, 48, 48, 48, 48, 48, 48, 48,             48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
// 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,             48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
// 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,             48, 48, 48, 48, 48, 48, 48, 48, 34, 125,
//         ];
//         match serde_json::from_slice::<SignedBlindedBeaconBlock>(&json_bytes) {
//             Ok(res) => {
//                 println!("PASSED. slot: {}", res.message().slot())
//             }
//             Err(err) => {
//                 println!("ERROR! {err:?}");
//             }
//         }
//     }

//     #[test]
//     fn test_serialization_of_signed_builder_bid() {
//         let mut logs_bloom = ByteVector::<256>::default();
//         logs_bloom[5] = 22;
//         logs_bloom[0] = 255;

//         let header = capella::ExecutionPayloadHeader {
//             parent_hash: Default::default(),
//             fee_recipient: Default::default(),
//             state_root: Default::default(),
//             receipts_root: Default::default(),
//             logs_bloom,
//             prev_randao: Default::default(),
//             block_number: 111,
//             gas_limit: 23,
//             gas_used: 54232,
//             timestamp: 11111,
//             extra_data: Default::default(),
//             base_fee_per_gas: Default::default(),
//             block_hash: Default::default(),
//             transactions_root: Default::default(),
//             withdrawals_root: Default::default(),
//         };

//         let builder_bid = SignedBuilderBid::Capella(
//             capella::SignedBuilderBid {
//                 message: capella::BuilderBid {
//                     header,
//                     value: U256::from(111111),
//                     public_key: Default::default(),
//                 },
//                 signature: Default::default(),
//             },
//             None,
//         );

//         let serialized = serde_json::to_vec(&builder_bid);
//         assert!(serialized.is_ok());
//         let serialized = serialized.unwrap();

//         let res = serde_json::from_slice::<SignedBuilderBid>(&serialized);
//         assert!(res.is_ok());
//     }

//     #[test]
//     fn test_deserialize_signed_builder_bid() {
//         let json_bytes = vec![
//             123, 34, 118, 101, 114, 115, 105, 111, 110, 34, 58, 34, 99, 97, 112, 101, 108, 108,
// 97,             34, 44, 34, 100, 97, 116, 97, 34, 58, 123, 34, 109, 101, 115, 115, 97, 103, 101,
// 34,             58, 123, 34, 104, 101, 97, 100, 101, 114, 34, 58, 123, 34, 112, 97, 114, 101,
// 110, 116,             95, 104, 97, 115, 104, 34, 58, 34, 48, 120, 48, 48, 48, 48, 48, 48, 48, 48,
// 48, 48, 48,             48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
// 48, 48, 48, 48,             48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
// 48, 48, 48, 48, 48,             48, 48, 48, 48, 48, 48, 48, 48, 48, 34, 44, 34, 102, 101, 101,
// 95, 114, 101, 99, 105,             112, 105, 101, 110, 116, 34, 58, 34, 48, 120, 48, 48, 48, 48,
// 48, 48, 48, 48, 48, 48,             48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
// 48, 48, 48, 48, 48, 48, 48,             48, 48, 48, 48, 48, 48, 48, 48, 34, 44, 34, 115, 116, 97,
// 116, 101, 95, 114, 111, 111,             116, 34, 58, 34, 48, 120, 48, 48, 48, 48, 48, 48, 48,
// 48, 48, 48, 48, 48, 48, 48, 48,             48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
// 48, 48, 48, 48, 48, 48, 48, 48, 48,             48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
// 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,             48, 48, 48, 48, 48, 34, 44, 34, 114, 101, 99,
// 101, 105, 112, 116, 115, 95, 114, 111,             111, 116, 34, 58, 34, 48, 120, 48, 48, 48, 48,
// 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,             48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
// 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,             48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
// 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,             48, 48, 48, 48, 48, 48, 34, 44, 34,
// 108, 111, 103, 115, 95, 98, 108, 111, 111, 109, 34,             58, 34, 48, 120, 102, 102, 48,
// 48, 48, 48, 48, 48, 48, 48, 49, 54, 48, 48, 48, 48, 48,             48, 48, 48, 48, 48, 48, 48,
// 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,             48, 48, 48, 48, 48, 48,
// 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,             48, 48, 48, 48, 48,
// 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,             48, 48, 48, 48,
// 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,             48, 48, 48,
// 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,             48, 48,
// 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,             48,
// 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
// 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
//             48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
// 48,             48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
// 48, 48,             48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
// 48, 48, 48,             48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
// 48, 48, 48, 48,             48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
// 48, 48, 48, 48, 48,             48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
// 48, 48, 48, 48, 48, 48,             48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
// 48, 48, 48, 48, 48, 48, 48,             48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
// 48, 48, 48, 48, 48, 48, 48, 48,             48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
// 48, 48, 48, 48, 48, 48, 48, 48, 48,             48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
// 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,             48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
// 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,             48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
// 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,             48, 48, 48, 48, 48, 48, 48, 48, 48,
// 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,             48, 48, 48, 48, 48, 48, 48, 48,
// 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,             48, 48, 48, 48, 48, 48, 48,
// 48, 48, 48, 48, 34, 44, 34, 112, 114, 101, 118, 95, 114,             97, 110, 100, 97, 111, 34,
// 58, 34, 48, 120, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,             48, 48, 48, 48, 48, 48,
// 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,             48, 48, 48, 48, 48,
// 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,             48, 48, 48, 48,
// 48, 48, 48, 48, 48, 34, 44, 34, 98, 108, 111, 99, 107, 95, 110, 117,             109, 98, 101,
// 114, 34, 58, 34, 48, 34, 44, 34, 103, 97, 115, 95, 108, 105, 109, 105,             116, 34, 58,
// 34, 50, 51, 34, 44, 34, 103, 97, 115, 95, 117, 115, 101, 100, 34, 58, 34,             53, 52, 50,
// 51, 50, 34, 44, 34, 116, 105, 109, 101, 115, 116, 97, 109, 112, 34, 58, 34,             49, 49,
// 49, 49, 49, 34, 44, 34, 101, 120, 116, 114, 97, 95, 100, 97, 116, 97, 34, 58,             34, 48,
// 120, 34, 44, 34, 98, 97, 115, 101, 95, 102, 101, 101, 95, 112, 101, 114, 95,             103, 97,
// 115, 34, 58, 34, 48, 34, 44, 34, 98, 108, 111, 99, 107, 95, 104, 97, 115, 104,             34,
// 58, 34, 48, 120, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,             48,
// 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
// 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
//             48, 48, 48, 48, 34, 44, 34, 116, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 115,
//             95, 114, 111, 111, 116, 34, 58, 34, 48, 120, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
//             48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
// 48,             48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
// 48, 48,             48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 34, 44, 34, 119, 105, 116, 104, 100,
// 114, 97,             119, 97, 108, 115, 95, 114, 111, 111, 116, 34, 58, 34, 48, 120, 48, 48, 48,
// 48, 48, 48,             48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
// 48, 48, 48, 48,             48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
// 48, 48, 48, 48, 48,             48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 34, 125,
// 44, 34, 118, 97, 108,             117, 101, 34, 58, 34, 49, 49, 49, 49, 49, 49, 34, 44, 34, 112,
// 117, 98, 107, 101, 121,             34, 58, 34, 48, 120, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
// 48, 48, 48, 48, 48, 48,             48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
// 48, 48, 48, 48, 48, 48, 48,             48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
// 48, 48, 48, 48, 48, 48, 48, 48,             48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
// 48, 48, 48, 48, 48, 48, 48, 48, 48,             48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
// 48, 48, 34, 125, 44, 34, 115, 105, 103,             110, 97, 116, 117, 114, 101, 34, 58, 34, 48,
// 120, 48, 48, 48, 48, 48, 48, 48, 48, 48,             48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
// 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,             48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
// 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,             48, 48, 48, 48, 48, 48, 48, 48, 48,
// 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,             48, 48, 48, 48, 48, 48, 48, 48,
// 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,             48, 48, 48, 48, 48, 48, 48,
// 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,             48, 48, 48, 48, 48, 48,
// 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,             48, 48, 48, 48, 48,
// 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,             48, 48, 48, 48,
// 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,             48, 48, 48,
// 48, 48, 48, 48, 34, 125, 125,         ];
//         let res = serde_json::from_slice::<SignedBuilderBid>(&json_bytes);
//         assert!(res.is_ok());
//     }
